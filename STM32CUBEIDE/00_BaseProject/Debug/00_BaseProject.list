
00_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08000960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000010  08000970  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400002c  08000970  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000035f7  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000009a3  00000000  00000000  00023678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000003a0  00000000  00000000  00024020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000299  00000000  00000000  000243c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036967  00000000  00000000  00024659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000478a  00000000  00000000  0005afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017152e  00000000  00000000  0005f74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000d98  00000000  00000000  001d0c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000082  00000000  00000000  001d1a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000930 	.word	0x08000930

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08000930 	.word	0x08000930

080002d8 <main>:
#include <stdint.h>
#include "main.h"


int main( void )
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	HAL_Init();
 80002dc:	f000 f82c 	bl	8000338 <HAL_Init>

	while(1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x8>
	...

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 fae9 	bl	80008e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ffdf 	bl	80002d8 <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000324:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000328:	08000960 	.word	0x08000960
  ldr r2, =_sbss
 800032c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000330:	2400002c 	.word	0x2400002c

08000334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC1_2_IRQHandler>
	...

08000338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 f926 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000344:	f000 f956 	bl	80005f4 <HAL_RCC_GetSysClockFreq>
 8000348:	4602      	mov	r2, r0
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_Init+0x68>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	0a1b      	lsrs	r3, r3, #8
 8000350:	f003 030f 	and.w	r3, r3, #15
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <HAL_Init+0x6c>)
 8000356:	5ccb      	ldrb	r3, [r1, r3]
 8000358:	f003 031f 	and.w	r3, r3, #31
 800035c:	fa22 f303 	lsr.w	r3, r2, r3
 8000360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_Init+0x68>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_Init+0x6c>)
 800036c:	5cd3      	ldrb	r3, [r2, r3]
 800036e:	f003 031f 	and.w	r3, r3, #31
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	fa22 f303 	lsr.w	r3, r2, r3
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <HAL_Init+0x70>)
 800037a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800037c:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <HAL_Init+0x74>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000382:	2000      	movs	r0, #0
 8000384:	f000 f81c 	bl	80003c0 <HAL_InitTick>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800038e:	2301      	movs	r3, #1
 8000390:	e002      	b.n	8000398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000392:	f000 f80d 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	58024400 	.word	0x58024400
 80003a4:	08000948 	.word	0x08000948
 80003a8:	24000004 	.word	0x24000004
 80003ac:	24000000 	.word	0x24000000

080003b0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
	...

080003c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_InitTick+0x60>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e021      	b.n	8000418 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <HAL_InitTick+0x64>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <HAL_InitTick+0x60>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f8f5 	bl	80005da <HAL_SYSTICK_Config>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	e00e      	b.n	8000418 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b0f      	cmp	r3, #15
 80003fe:	d80a      	bhi.n	8000416 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000400:	2200      	movs	r2, #0
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	f04f 30ff 	mov.w	r0, #4294967295
 8000408:	f000 f8cd 	bl	80005a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <HAL_InitTick+0x68>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000412:	2300      	movs	r3, #0
 8000414:	e000      	b.n	8000418 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000416:	2301      	movs	r3, #1
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2400000c 	.word	0x2400000c
 8000424:	24000000 	.word	0x24000000
 8000428:	24000008 	.word	0x24000008

0800042c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f003 0307 	and.w	r3, r3, #7
 800043a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <__NVIC_SetPriorityGrouping+0x40>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <__NVIC_SetPriorityGrouping+0x44>)
 8000456:	4313      	orrs	r3, r2
 8000458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <__NVIC_SetPriorityGrouping+0x40>)
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	60d3      	str	r3, [r2, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00
 8000470:	05fa0000 	.word	0x05fa0000

08000474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <__NVIC_GetPriorityGrouping+0x18>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	f003 0307 	and.w	r3, r3, #7
}
 8000482:	4618      	mov	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	6039      	str	r1, [r7, #0]
 800049a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800049c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	db0a      	blt.n	80004ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	490c      	ldr	r1, [pc, #48]	; (80004dc <__NVIC_SetPriority+0x4c>)
 80004aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ae:	0112      	lsls	r2, r2, #4
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	440b      	add	r3, r1
 80004b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004b8:	e00a      	b.n	80004d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4908      	ldr	r1, [pc, #32]	; (80004e0 <__NVIC_SetPriority+0x50>)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	f003 030f 	and.w	r3, r3, #15
 80004c6:	3b04      	subs	r3, #4
 80004c8:	0112      	lsls	r2, r2, #4
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	440b      	add	r3, r1
 80004ce:	761a      	strb	r2, [r3, #24]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000e100 	.word	0xe000e100
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	f1c3 0307 	rsb	r3, r3, #7
 80004fe:	2b04      	cmp	r3, #4
 8000500:	bf28      	it	cs
 8000502:	2304      	movcs	r3, #4
 8000504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	3304      	adds	r3, #4
 800050a:	2b06      	cmp	r3, #6
 800050c:	d902      	bls.n	8000514 <NVIC_EncodePriority+0x30>
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	3b03      	subs	r3, #3
 8000512:	e000      	b.n	8000516 <NVIC_EncodePriority+0x32>
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000518:	f04f 32ff 	mov.w	r2, #4294967295
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	43da      	mvns	r2, r3
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	401a      	ands	r2, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800052c:	f04f 31ff 	mov.w	r1, #4294967295
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	43d9      	mvns	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	4313      	orrs	r3, r2
         );
}
 800053e:	4618      	mov	r0, r3
 8000540:	3724      	adds	r7, #36	; 0x24
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800055c:	d301      	bcc.n	8000562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800055e:	2301      	movs	r3, #1
 8000560:	e00f      	b.n	8000582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <SysTick_Config+0x40>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3b01      	subs	r3, #1
 8000568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800056a:	210f      	movs	r1, #15
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f7ff ff8e 	bl	8000490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <SysTick_Config+0x40>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <SysTick_Config+0x40>)
 800057c:	2207      	movs	r2, #7
 800057e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	e000e010 	.word	0xe000e010

08000590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ff47 	bl	800042c <__NVIC_SetPriorityGrouping>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005b4:	f7ff ff5e 	bl	8000474 <__NVIC_GetPriorityGrouping>
 80005b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	6978      	ldr	r0, [r7, #20]
 80005c0:	f7ff ff90 	bl	80004e4 <NVIC_EncodePriority>
 80005c4:	4602      	mov	r2, r0
 80005c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff5f 	bl	8000490 <__NVIC_SetPriority>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffb2 	bl	800054c <SysTick_Config>
 80005e8:	4603      	mov	r3, r0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80005fa:	4bb3      	ldr	r3, [pc, #716]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000602:	2b18      	cmp	r3, #24
 8000604:	f200 8155 	bhi.w	80008b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000675 	.word	0x08000675
 8000614:	080008b3 	.word	0x080008b3
 8000618:	080008b3 	.word	0x080008b3
 800061c:	080008b3 	.word	0x080008b3
 8000620:	080008b3 	.word	0x080008b3
 8000624:	080008b3 	.word	0x080008b3
 8000628:	080008b3 	.word	0x080008b3
 800062c:	080008b3 	.word	0x080008b3
 8000630:	0800069b 	.word	0x0800069b
 8000634:	080008b3 	.word	0x080008b3
 8000638:	080008b3 	.word	0x080008b3
 800063c:	080008b3 	.word	0x080008b3
 8000640:	080008b3 	.word	0x080008b3
 8000644:	080008b3 	.word	0x080008b3
 8000648:	080008b3 	.word	0x080008b3
 800064c:	080008b3 	.word	0x080008b3
 8000650:	080006a1 	.word	0x080006a1
 8000654:	080008b3 	.word	0x080008b3
 8000658:	080008b3 	.word	0x080008b3
 800065c:	080008b3 	.word	0x080008b3
 8000660:	080008b3 	.word	0x080008b3
 8000664:	080008b3 	.word	0x080008b3
 8000668:	080008b3 	.word	0x080008b3
 800066c:	080008b3 	.word	0x080008b3
 8000670:	080006a7 	.word	0x080006a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000674:	4b94      	ldr	r3, [pc, #592]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0320 	and.w	r3, r3, #32
 800067c:	2b00      	cmp	r3, #0
 800067e:	d009      	beq.n	8000694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000680:	4b91      	ldr	r3, [pc, #580]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	f003 0303 	and.w	r3, r3, #3
 800068a:	4a90      	ldr	r2, [pc, #576]	; (80008cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800068c:	fa22 f303 	lsr.w	r3, r2, r3
 8000690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8000692:	e111      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000694:	4b8d      	ldr	r3, [pc, #564]	; (80008cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000696:	61bb      	str	r3, [r7, #24]
      break;
 8000698:	e10e      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800069a:	4b8d      	ldr	r3, [pc, #564]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800069c:	61bb      	str	r3, [r7, #24]
      break;
 800069e:	e10b      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80006a0:	4b8c      	ldr	r3, [pc, #560]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80006a2:	61bb      	str	r3, [r7, #24]
      break;
 80006a4:	e108      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80006a6:	4b88      	ldr	r3, [pc, #544]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	f003 0303 	and.w	r3, r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80006b0:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80006b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b4:	091b      	lsrs	r3, r3, #4
 80006b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80006bc:	4b82      	ldr	r3, [pc, #520]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80006be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80006c6:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 80e1 	beq.w	80008ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	f000 8083 	beq.w	80007f8 <HAL_RCC_GetSysClockFreq+0x204>
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	f200 80a1 	bhi.w	800083c <HAL_RCC_GetSysClockFreq+0x248>
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <HAL_RCC_GetSysClockFreq+0x114>
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d056      	beq.n	80007b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8000706:	e099      	b.n	800083c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000708:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 0320 	and.w	r3, r3, #32
 8000710:	2b00      	cmp	r3, #0
 8000712:	d02d      	beq.n	8000770 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000714:	4b6c      	ldr	r3, [pc, #432]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	08db      	lsrs	r3, r3, #3
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	4a6b      	ldr	r2, [pc, #428]	; (80008cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000720:	fa22 f303 	lsr.w	r3, r2, r3
 8000724:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	ee07 3a90 	vmov	s15, r3
 8000736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800073a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800073e:	4b62      	ldr	r3, [pc, #392]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800074e:	ed97 6a02 	vldr	s12, [r7, #8]
 8000752:	eddf 5a61 	vldr	s11, [pc, #388]	; 80008d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800075a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800075e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800076e:	e087      	b.n	8000880 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800077a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80008dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800077e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000782:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000792:	ed97 6a02 	vldr	s12, [r7, #8]
 8000796:	eddf 5a50 	vldr	s11, [pc, #320]	; 80008d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800079a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800079e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80007a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80007aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80007b2:	e065      	b.n	8000880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80008e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80007c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007c6:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80007da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80008d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80007de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80007e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80007e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80007ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80007f6:	e043      	b.n	8000880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	ee07 3a90 	vmov	s15, r3
 80007fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000802:	eddf 6a38 	vldr	s13, [pc, #224]	; 80008e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8000806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800081a:	ed97 6a02 	vldr	s12, [r7, #8]
 800081e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80008d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800082a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800082e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800083a:	e021      	b.n	8000880 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000846:	eddf 6a26 	vldr	s13, [pc, #152]	; 80008e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800084a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000856:	ee07 3a90 	vmov	s15, r3
 800085a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800085e:	ed97 6a02 	vldr	s12, [r7, #8]
 8000862:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80008d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800086a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800086e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800087a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800087e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	0a5b      	lsrs	r3, r3, #9
 8000886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800088a:	3301      	adds	r3, #1
 800088c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000898:	edd7 6a07 	vldr	s13, [r7, #28]
 800089c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a4:	ee17 3a90 	vmov	r3, s15
 80008a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80008aa:	e005      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
      break;
 80008b0:	e002      	b.n	80008b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80008b4:	61bb      	str	r3, [r7, #24]
      break;
 80008b6:	bf00      	nop
  }

  return sysclockfreq;
 80008b8:	69bb      	ldr	r3, [r7, #24]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	58024400 	.word	0x58024400
 80008cc:	03d09000 	.word	0x03d09000
 80008d0:	003d0900 	.word	0x003d0900
 80008d4:	007a1200 	.word	0x007a1200
 80008d8:	46000000 	.word	0x46000000
 80008dc:	4c742400 	.word	0x4c742400
 80008e0:	4a742400 	.word	0x4a742400
 80008e4:	4af42400 	.word	0x4af42400

080008e8 <__libc_init_array>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	4d0d      	ldr	r5, [pc, #52]	; (8000920 <__libc_init_array+0x38>)
 80008ec:	4c0d      	ldr	r4, [pc, #52]	; (8000924 <__libc_init_array+0x3c>)
 80008ee:	1b64      	subs	r4, r4, r5
 80008f0:	10a4      	asrs	r4, r4, #2
 80008f2:	2600      	movs	r6, #0
 80008f4:	42a6      	cmp	r6, r4
 80008f6:	d109      	bne.n	800090c <__libc_init_array+0x24>
 80008f8:	4d0b      	ldr	r5, [pc, #44]	; (8000928 <__libc_init_array+0x40>)
 80008fa:	4c0c      	ldr	r4, [pc, #48]	; (800092c <__libc_init_array+0x44>)
 80008fc:	f000 f818 	bl	8000930 <_init>
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	10a4      	asrs	r4, r4, #2
 8000904:	2600      	movs	r6, #0
 8000906:	42a6      	cmp	r6, r4
 8000908:	d105      	bne.n	8000916 <__libc_init_array+0x2e>
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000910:	4798      	blx	r3
 8000912:	3601      	adds	r6, #1
 8000914:	e7ee      	b.n	80008f4 <__libc_init_array+0xc>
 8000916:	f855 3b04 	ldr.w	r3, [r5], #4
 800091a:	4798      	blx	r3
 800091c:	3601      	adds	r6, #1
 800091e:	e7f2      	b.n	8000906 <__libc_init_array+0x1e>
 8000920:	08000958 	.word	0x08000958
 8000924:	08000958 	.word	0x08000958
 8000928:	08000958 	.word	0x08000958
 800092c:	0800095c 	.word	0x0800095c

08000930 <_init>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	bf00      	nop
 8000934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	469e      	mov	lr, r3
 800093a:	4770      	bx	lr

0800093c <_fini>:
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	bf00      	nop
 8000940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000942:	bc08      	pop	{r3}
 8000944:	469e      	mov	lr, r3
 8000946:	4770      	bx	lr
